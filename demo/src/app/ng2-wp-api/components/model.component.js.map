{"version":3,"file":"model.component.js","sourceRoot":"","sources":["../inlined/components/model.component.ts"],"names":[],"mappings":"OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,YAAY,EAA4B,uBAAuB,EAAC,MAAM,eAAe;OAEhH,EAAC,SAAS,EAAC,MAAM,uBAAuB;AAM/C;IAoBE,0BAAoB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QAHxC,8BAA8B;QAC7B,aAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;IAG/B,CAAC;IAfD,sBAAI,sCAAQ;QAFZ,4DAA4D;aAE5D,UAAa,QAAgB;YAC3B,yBAAyB;YACzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACzD,CAAC;;;OAAA;IAcD,kDAAkD;IAClD,sCAAW,GAAX,UAAY,OAAsB;QAChC,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;QACzB,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YACT,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC;YAChC,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;YAC9B,EAAE,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC;gBAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;IAED,yCAAyC;IAClC,8BAAG,GAAV,UAAW,EAAE,EAAE,IAAK;QAApB,iBAEC;QADC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,GAAG,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAvB,CAAuB,CAAC,CAAC;IACtE,CAAC;IAEI,2BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;oBACxB,QAAQ,EAAE,UAAU;oBACpB,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,QAAQ,EAAE,2BAA2B;iBACtC,EAAG,EAAE;KACL,CAAC;IACF,kBAAkB;IACX,+BAAc,GAA6D;QAClF,EAAC,IAAI,EAAE,SAAS,GAAG;KAClB,CAAC;IACK,+BAAc,GAA2C;QAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9B,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QACxB,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;QAC1B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;KAC9B,CAAC;IACF,uBAAC;AAAD,CAAC,AAvDD,IAuDC","sourcesContent":["import {Component, Input, Output, EventEmitter, OnChanges, SimpleChanges, ChangeDetectionStrategy} from '@angular/core';\n\nimport {WpService} from '../service/wp.service';\nimport {ModelService} from '../service/model/model.service';\nimport {WpQueryArgs} from \"../helpers/wp-query.class\";\n\n\n\nexport class WpModelComponent implements OnChanges {\n\n  private model: ModelService;\n\n  /** Inputs for api endpoint, query arguments and model id */\n  \n  set endpoint(endpoint: string) {\n    /** Set model endpoint */\n    this.model = this.wpService.model().endpoint(endpoint);\n  }\n\n  /** Model Id, the component will refresh the request on id changes */\n   id: number;\n\n  /** Model QueryArgs */\n   args: WpQueryArgs;\n\n  /** Output for the response */\n   response = new EventEmitter();\n\n  constructor(private wpService: WpService) {\n  }\n\n  /** Detects if args has changed to fetch again. */\n  ngOnChanges(changes: SimpleChanges) {\n    let chng = changes['id'];\n    if (chng) {\n      let prevId = chng.previousValue;\n      let newId = chng.currentValue;\n      if (prevId != newId) this.get(newId, this.args);\n    }\n  }\n\n  /** Get a model of endpoint type by id */\n  public get(id, args?) {\n    this.model.get(id, args).subscribe((res) =>this.response.emit(res));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'wp-model',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `<ng-content></ng-content>`\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n{type: WpService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'endpoint': [{ type: Input },],\n'id': [{ type: Input },],\n'args': [{ type: Input },],\n'response': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}