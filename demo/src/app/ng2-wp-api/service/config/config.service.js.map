{"version":3,"file":"config.service.js","sourceRoot":"","sources":["../../inlined/service/config/config.service.ts"],"names":[],"mappings":"OAAO,EAAC,UAAU,EAAC,MAAM,eAAe;OACjC,EAAC,OAAO,EAAC,MAAM,eAAe;OAC9B,EAAC,eAAe,EAAC,MAAM,sBAAsB;AAKpD;IAgBE;QAZA,sBAAsB;QACtB,YAAO,GAAW,IAAI,CAAC;QAYrB,IAAI,CAAC,OAAO,GAAG,IAAI,eAAe,CAAU,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,GAAG,IAAI,eAAe,CAAM,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,+BAAO,GAAP;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACvB,KAAK,QAAQ,CAAC,KAAK;gBACjB,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACtC,KAAK,QAAQ,CAAC,OAAO;gBACnB,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACxC;gBACE,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;IACH,CAAC;IAED,+BAAO,GAAP,UAAQ,IAAY,EAAE,IAAc;QAClC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAEI,wBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,4BAAc,GAA6D,EACjF,CAAC;IACF,oBAAC;AAAD,CAAC,AA3CD,IA2CC;AAED,WAAY,QAGX;AAHD,WAAY,QAAQ;IAClB,yCAAK,CAAA;IACL,6CAAO,CAAA;AACT,CAAC,EAHW,QAAQ,KAAR,QAAQ,QAGnB;AAED,sBAAsB,IAAY;IAChC,IAAI,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;IAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACT,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,QAAQ,GAAG,IAAI,CAAC,CAAC;IACnD,CAAC;IACD,MAAM,CAAC,OAAO,CAAC;AACjB,CAAC;AAED,wBAAwB,IAAY;IAClC,IAAI,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;IAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QACT,OAAO,CAAC,MAAM,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IACD,MAAM,CAAC,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Headers} from \"@angular/http\";\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\n\nimport {ConfigInterface} from './config.interface';\n\n\nexport class ConfigService implements ConfigInterface {\n\n  /** base URL */\n  baseUrl: string;\n  /** request timeout */\n  timeOut: number = 5000;\n\n  /** Subscribe to `loading` to get notified when the service is busy. */\n  loading: BehaviorSubject<boolean>;\n\n  /** Subscribe to `logs` to get notified whenever an error occurs. */\n  errors: BehaviorSubject<any>;\n\n  private _authType: AuthType;\n  private _authKeys: string;\n\n  constructor() {\n    this.loading = new BehaviorSubject<boolean>(false);\n    this.errors = new BehaviorSubject<any>(null);\n  }\n\n  getAuth(): Headers {\n    switch (this._authType) {\n      case AuthType.basic:\n        return basicHeaders(this._authKeys);\n      case AuthType.cookies:\n        return cookiesHeaders(this._authKeys);\n      default:\n        return undefined;\n    }\n  }\n\n  setAuth(keys: string, type: AuthType){\n    this._authKeys = keys;\n    this._authType = type;\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: ({type: any, decorators?: DecoratorInvocation[]}|null)[] = [\n];\n}\n\nexport enum AuthType{\n  basic,\n  cookies\n}\n\nfunction basicHeaders(keys: string): Headers {\n  let headers = new Headers();\n  if (keys) {\n    headers.append('Authorization', 'Basic ' + keys);\n  }\n  return headers;\n}\n\nfunction cookiesHeaders(keys: string): Headers {\n  let headers = new Headers();\n  if (keys) {\n    headers.append('X-WP-Nonce', keys);\n  }\n  return headers;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}